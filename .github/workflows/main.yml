# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on: [push, pull_request, workflow_dispatch]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: beta
          
      - name: Setup
        run: |
          flutter config --enable-linux-desktop
          flutter pub get
          
      - name: Patch for linux build
        run: |
          sudo apt install clang
          sudo apt install ninja-build
          sudo apt install libgtk-3-dev
          
      - name: Test
        run: flutter test
        
      - name: Build
        run: flutter build linux
        
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: build/linux/x64/release/bundle/hds_overlay
  
  build_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: beta
          
      - name: Setup
        run: |
          flutter config --enable-macos-desktop
          flutter pub get
          
      - name: Test
        run: flutter test
        
      - name: Build
        run: |
          flutter build macos
        
#       - name: "Import Certificate: Development"
#         uses: devbotsxyz/import-signing-certificate@main
#         with:
#           certificate-data: ${{ secrets.DEVELOPMENT_CERTIFICATE_DATA }}
#           certificate-passphrase: ${{ secrets.DEVELOPMENT_CERTIFICATE_PASSPHRASE }}
#           keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: "Import Certificate: Distribution"
        uses: devbotsxyz/import-signing-certificate@main
        with:
          certificate-data: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
          certificate-passphrase: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      #
      # First we do a developer build that we archive into an
      # .xcarchive.
      #

      - name: "Archive"
        uses: devbotsxyz/xcode-archive@v1
        with:
          working-directory: macos

      #
      # Next ask Xcode to export the product from the archived build
      # we just created. This will also re-sign the application with
      # the "Developer ID" certificate.
      #

      - name: "Export & Sign Release Build"
        uses: devbotsxyz/xcode-export-archive@master
        with:
          working-directory: macos

      #
      # Now send the product to Apple's notarization service and then
      # staple it.
      #

      - name: "Notarize Release Build"
        uses: devbotsxyz/xcode-notarize@v1
        with:
          working-directory: macos
          product-path: "Export/hds_overlay.app"
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      - name: "Staple Release Build"
        uses: devbotsxyz/xcode-staple@v1
        with:
          working-directory: macos
          product-path: "Export/hds_overlay.app"
          
      #
      # Zip up the app and add it to the GitHub Release as a
      # downloadable asset.
      #

      - name: Package for Distribution
        working-directory: macos
        run: ditto -V -c -k --keepParent "Export/hds_overlay.app" "hds_overlay.zip"
        
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          working-directory: macos
          name: macos
          path: hds_overlay.zip
          
  build_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: beta
          
      - name: Setup
        run: |
          flutter config --enable-windows-desktop
          flutter pub get
          
      - name: Test
        run: flutter test
        
      - name: Build
        run: flutter build windows
        
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: build/windows/runner/Release/hds_overlay.exe
          
  deploy:
    runs-on: ubuntu-latest
    needs: [build_linux, build_macos, build_windows]
    if: success() && contains(github.ref, 'refs/tags/')
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
          
      - name: Create release draft
        uses: ncipollo/release-action@v1
        with:
            artifacts: "windows/*,macos/*,linux/*"
            draft: true
            token: ${{ secrets.GITHUB_TOKEN }}
